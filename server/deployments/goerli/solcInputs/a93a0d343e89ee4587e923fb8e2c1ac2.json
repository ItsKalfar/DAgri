{
  "language": "Solidity",
  "sources": {
    "contracts/SupplyChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n// Errors\r\nerror NotListed();\r\nerror PriceMustNotZero();\r\nerror PriceNotMet();\r\nerror NotOwner();\r\n\r\ncontract SupplyChain {\r\n    uint256 public s_tokenIDs;\r\n\r\n    // State Variables\r\n    struct Product {\r\n        string productName;\r\n        uint256 tokenId;\r\n        uint256 productQuantity;\r\n        uint256 productPrice;\r\n        string cateory;\r\n        address seller;\r\n    }\r\n    struct Owners {\r\n        address farmerAddress;\r\n        address distributerAddress;\r\n        address retailerAddress;\r\n    }\r\n\r\n    // Mappings - To keep track of Products and it's owners\r\n    // Farmers inventory - tokenId => Product\r\n    mapping(uint256 => Product) public s_farmerInventory;\r\n    // Distributer inventory - tokenId => Product\r\n    mapping(uint256 => Product) public s_distributerInventory;\r\n    // Token Id to all the owners\r\n    mapping(uint256 => Owners) public s_productOwners;\r\n    // Product Name => List of products in distributers inventory\r\n    // Because retailer may not know the token id\r\n    mapping(string => Product) public s_productDistributer;\r\n\r\n    // Events - fire events on state changes\r\n    event ItemListed(\r\n        string indexed productName,\r\n        uint256 indexed tokenId,\r\n        uint256 productQuantity,\r\n        uint256 productPrice,\r\n        address indexed seller\r\n    );\r\n    event ItemBought(\r\n        string indexed productName,\r\n        uint256 indexed tokenId,\r\n        uint256 productQuantity,\r\n        uint256 productPrice,\r\n        address indexed seller\r\n    );\r\n    event ItemCanceled(\r\n        string indexed productName,\r\n        uint256 indexed tokenId,\r\n        address indexed seller\r\n    );\r\n    event ItemUpdated(\r\n        string indexed productName,\r\n        uint256 indexed tokenId,\r\n        address indexed seller\r\n    );\r\n    event ItemPurchased(\r\n        string indexed productName,\r\n        uint256 indexed tokenId,\r\n        uint256 productQuantity,\r\n        uint256 productPrice,\r\n        address indexed seller\r\n    );\r\n\r\n    // Modifiers\r\n    // Item not listed Yet\r\n    modifier notListed(uint256 _tokenID) {\r\n        Product memory product = s_farmerInventory[_tokenID];\r\n        if (product.productPrice <= 0) {\r\n            revert NotListed();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Can be called only by owner\r\n    modifier isOwner(uint256 _tokenID) {\r\n        Product memory product = s_farmerInventory[_tokenID];\r\n        if (product.seller != msg.sender) {\r\n            revert NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Functions\r\n    /// @notice List the product details on the marketplace\r\n    /// @param _ProductName - Name of the product\r\n    /// @param _quantity - Quantity of product to be sold\r\n    /// @param _price price of the product to be sold\r\n    function listItem(\r\n        string memory _ProductName,\r\n        uint256 _quantity,\r\n        uint256 _price,\r\n        string memory _category\r\n    ) external {\r\n        if (_price <= 0) {\r\n            revert PriceMustNotZero();\r\n        }\r\n        s_tokenIDs++;\r\n        uint256 currentID = s_tokenIDs;\r\n        s_farmerInventory[currentID] = Product(\r\n            _ProductName,\r\n            currentID,\r\n            _quantity,\r\n            _price,\r\n            _category,\r\n            msg.sender\r\n        );\r\n        s_productOwners[currentID].farmerAddress = msg.sender;\r\n        emit ItemListed(_ProductName, currentID, _quantity, _price, msg.sender);\r\n    }\r\n\r\n    /// @notice Update the price of an already listed product\r\n    /// @param _tokenID - The token id of the product to be updated\r\n    /// @param _newPrice - The price to which you want to update it.\r\n    function updateListing(\r\n        uint256 _tokenID,\r\n        uint256 _newPrice\r\n    ) external notListed(_tokenID) isOwner(_tokenID) {\r\n        s_farmerInventory[_tokenID].productPrice = _newPrice;\r\n    }\r\n\r\n    /// @notice Cancel the listing of a product\r\n    /// @param _tokenID - The token id of the product to be canceled\r\n    function cancelItem(\r\n        uint256 _tokenID\r\n    ) external notListed(_tokenID) isOwner(_tokenID) {\r\n        Product memory product = s_farmerInventory[_tokenID];\r\n        delete (s_farmerInventory[_tokenID]);\r\n        emit ItemCanceled(product.productName, _tokenID, product.seller);\r\n    }\r\n\r\n    // Distributer functions\r\n    /// @notice Buy the product from farmer and add it into distributer's inventory\r\n    /// @param _tokenID - The token id of the product to be bought\r\n    function buyItem(uint256 _tokenID) external payable notListed(_tokenID) {\r\n        Product memory product = s_farmerInventory[_tokenID];\r\n        if (msg.value != product.productPrice) {\r\n            revert PriceNotMet();\r\n        }\r\n        delete (s_farmerInventory[_tokenID]);\r\n        uint256 newPrice = (product.productPrice +\r\n            (product.productPrice * 20) /\r\n            100);\r\n        s_distributerInventory[_tokenID] = Product(\r\n            product.productName,\r\n            product.tokenId,\r\n            product.productQuantity,\r\n            newPrice,\r\n            product.cateory,\r\n            msg.sender\r\n        );\r\n        s_productOwners[product.tokenId].distributerAddress = msg.sender;\r\n        s_productDistributer[product.productName] = Product(\r\n            product.productName,\r\n            product.tokenId,\r\n            product.productQuantity,\r\n            newPrice,\r\n            product.cateory,\r\n            msg.sender\r\n        );\r\n        (bool success, ) = payable(product.seller).call{\r\n            value: product.productPrice\r\n        }(\"\");\r\n        require(success, \"call failed\");\r\n        emit ItemBought(\r\n            product.productName,\r\n            product.tokenId,\r\n            product.productQuantity,\r\n            newPrice,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    // Retailer's Functions\r\n    /// @notice Purchase the item from distributer\r\n    /// @param _tokenID - The token id of the product to be bought\r\n    function purchaseItem(uint256 _tokenID) external payable {\r\n        Product memory product = s_distributerInventory[_tokenID];\r\n        if (product.productPrice < 0) {\r\n            revert NotListed();\r\n        }\r\n        if (msg.value != product.productPrice) {\r\n            revert PriceNotMet();\r\n        }\r\n        delete (s_distributerInventory[_tokenID]);\r\n        delete (s_productDistributer[product.productName]);\r\n        s_productOwners[product.tokenId].retailerAddress = msg.sender;\r\n        (bool success, ) = payable(product.seller).call{\r\n            value: product.productPrice\r\n        }(\"\");\r\n        require(success, \"call failed\");\r\n        emit ItemPurchased(\r\n            product.productName,\r\n            product.tokenId,\r\n            product.productQuantity,\r\n            product.productPrice,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    // Getter functions\r\n\r\n    function getFarmersListing(\r\n        uint256 _tokenID\r\n    ) external view returns (Product memory) {\r\n        return s_farmerInventory[_tokenID];\r\n    }\r\n\r\n    function getDistributerInventory(\r\n        uint256 _tokenID\r\n    ) external view returns (Product memory) {\r\n        return s_distributerInventory[_tokenID];\r\n    }\r\n\r\n    function getAllOwners(\r\n        uint256 _tokenID\r\n    ) external view returns (Owners memory) {\r\n        return s_productOwners[_tokenID];\r\n    }\r\n\r\n    function searchDistributer(\r\n        string memory _productName\r\n    ) external view returns (Product memory) {\r\n        return s_productDistributer[_productName];\r\n    }\r\n\r\n    function getTokenId() external view returns (uint256) {\r\n        return s_tokenIDs;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}